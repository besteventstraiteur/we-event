// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/supabase-db';

const supabase = createClient<Database>("https://awraiakbiahrzncoeyya.supabase.co", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF3cmFpYWtiaWFocnpuY29leXlhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1MjYwOTUsImV4cCI6MjA2MDEwMjA5NX0.8da1AC1m6DDwrLbRPlYZ9KHx89pE4xtw2AkTQFbciys", {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: {
      getItem: key => {
        // For compatibility with demo accounts which still use localStorage
        if (key === 'weddingPlannerEmail' || key === 'weddingPlannerRememberMe') {
          return localStorage.getItem(key);
        }
        return null;
      },
      setItem: (key, value) => {
        // For compatibility with demo accounts which still use localStorage
        if (key === 'weddingPlannerEmail' || key === 'weddingPlannerRememberMe') {
          localStorage.setItem(key, value);
        }
      },
      removeItem: key => {
        // For compatibility with demo accounts which still use localStorage
        if (key === 'weddingPlannerEmail' || key === 'weddingPlannerRememberMe') {
          localStorage.removeItem(key);
        }
      }
    },
    db: {
      schema: 'public'
    },
    global: {
      fetch: (...args) => {
        console.debug('Supabase API Call:', {
          url: args[0],
          method: (args[1] as RequestInit)?.method || 'GET',
          timestamp: new Date().toISOString()
        });
        
        return fetch(args[0] as RequestInfo | URL, args[1] as RequestInit | undefined)
          .then(async (response) => {
            if (!response.ok) {
              console.error('Supabase API Error:', {
                status: response.status,
                statusText: response.statusText,
                url: response.url
              });
              const errorBody = await response.text();
              console.error('Error details:', errorBody);
            }
            return response;
          })
          .catch(err => {
            console.error('Supabase Network Error:', {
              message: err.message,
              type: err.name,
              stack: err.stack
            });
            throw err;
          });
      }
    }
  }
});

// Helper function pour tester la connexion à la base de données
export const testDatabaseConnection = async () => {
  try {
    const startTime = performance.now();
    const { data, error } = await supabase.from('profiles').select('id').limit(1);
    const endTime = performance.now();
    
    if (error) {
      console.error("Database connection test failed:", {
        error: error.message,
        code: error.code,
        details: error,
        timestamp: new Date().toISOString()
      });
      return {
        success: false,
        error: error.message,
        errorCode: error.code,
        details: error,
        latency: endTime - startTime
      };
    }
    
    console.info("Database connection successful:", {
      latency: endTime - startTime,
      timestamp: new Date().toISOString()
    });
    
    return { 
      success: true,
      message: "Successfully connected to Supabase database",
      latency: endTime - startTime
    };
  } catch (err) {
    console.error("Database connection exception:", {
      error: err instanceof Error ? err.message : String(err),
      stack: err instanceof Error ? err.stack : undefined,
      timestamp: new Date().toISOString()
    });
    return {
      success: false,
      error: err instanceof Error ? err.message : String(err),
      exception: err
    };
  }
};

export { supabase };
